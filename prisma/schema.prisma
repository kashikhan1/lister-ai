// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model Article {
  id          Int      @id @default(autoincrement())
  title       String   
  description String?
  body        String
  imgurl      String?
  topic       String?
  views       Int?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model User {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String    @unique
  password                 String?
  provider                 String    @default("custom")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  passwordResetAt          DateTime?
  articles                 Article[]
  bookmark    Bookmark[]
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subCategory  SubCategory[]
}

model SubCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tool Tool[]
}

model Tool {
  id        Int       @id @default(autoincrement())
  name      String    
  description String?
  body        String
  imgurl      String?
  topic       String?
  views       Int?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subCategory      SubCategory?    @relation(fields: [subCategoryId], references: [id])
  subCategoryId    Int?
  tag      Tag?    @relation(fields: [tagId], references: [id])
  tagId    Int?
  bookmark  Bookmark[]
  }

// model Comment {
//   id        Int       @id @default(autoincrement())
//   body      String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   article   Article   @relation(fields: [articleId], references: [id])
//   articleId Int
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Favorite {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   article   Article  @relation(fields: [articleId], references: [id])
//   articleId Int
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
// }

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tool      Tool[]
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tool   Tool  @relation(fields: [toolId], references: [id])
  toolId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

// model Report {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   article   Article  @relation(fields: [articleId], references: [id])
//   articleId Int
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
// }

// model Vote {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   article   Article  @relation(fields: [articleId], references: [id])
//   articleId Int
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
// }

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
