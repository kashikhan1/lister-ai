// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model User {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String    @unique
  password                 String
  provider                 String    @default("custom")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  passwordResetToken       String?   @unique
  PasswordResetTokenExpiry DateTime?
  passwordResetAt          DateTime?
  articles                 Article[]
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

// model Comment {
//   id        Int       @id @default(autoincrement())
//   body      String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   article   Article   @relation(fields: [articleId], references: [id])
//   articleId Int
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Tool {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Report {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
}

model CommentImage {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model ArticleImage {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
}

model ArticleVideo {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int?
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int
}

model NotificationSetting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String
  subject   String?
  message   String?
}
